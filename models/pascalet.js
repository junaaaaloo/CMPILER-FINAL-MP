/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var pascalet = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,23],$V2=[1,22],$V3=[1,21],$V4=[1,24],$V5=[1,16],$V6=[33,53,55],$V7=[46,52,55],$V8=[1,60],$V9=[1,61],$Va=[1,63],$Vb=[1,62],$Vc=[1,64],$Vd=[1,46],$Ve=[1,48],$Vf=[1,45],$Vg=[1,44],$Vh=[1,43],$Vi=[1,57],$Vj=[1,58],$Vk=[1,59],$Vl=[33,46,52,53,55],$Vm=[1,73],$Vn=[1,83],$Vo=[1,86],$Vp=[24,29,57,72,99],$Vq=[2,65],$Vr=[29,57,72,99],$Vs=[1,96],$Vt=[1,91],$Vu=[1,92],$Vv=[1,93],$Vw=[1,94],$Vx=[1,95],$Vy=[1,97],$Vz=[1,98],$VA=[1,99],$VB=[1,100],$VC=[1,101],$VD=[1,102],$VE=[1,103],$VF=[1,104],$VG=[1,105],$VH=[29,36,57,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,99],$VI=[2,96],$VJ=[1,108],$VK=[24,25,29,36,50,51,57,64,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,95,96,99],$VL=[1,90],$VM=[57,99],$VN=[2,50],$VO=[1,170],$VP=[1,171],$VQ=[24,25,29,36,50,51,57,64,70,72,73,74,78,79,80,81,82,84,95,96,99],$VR=[24,25,29,36,50,51,57,64,70,72,78,79,80,81,82,95,96,99],$VS=[24,25,29,50,51,57,64,70,72,79,80,81,82,95,96,99],$VT=[50,64],$VU=[29,50],$VV=[2,98];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"pascal":3,"program":4,"EOF":5,"identifier":6,"IDENTIFIER":7,"integer":8,"INTEGER":9,"real":10,"REAL":11,"string":12,"STRING":13,"character":14,"CHARACTER":15,"boolean":16,"BOOLEAN":17,"literal":18,"type":19,"TYPE":20,"ARRAY":21,"[":22,"expression":23,".":24,"]":25,"OF":26,"PROGRAM":27,"program_name":28,";":29,"routine_list":30,"main":31,"constant_list":32,"CONST":33,"constant_items":34,"constant":35,"=":36,"routine":37,"end_block":38,"header":39,"declarations_list":40,"body":41,"declarations_item":42,"routine_variables":43,"procedure_header":44,"function_header":45,"FUNCTION":46,"routine_name":47,"(":48,"parameters_list":49,")":50,":":51,"PROCEDURE":52,"VAR":53,"declaration_list":54,"BEGIN":55,"statement_list":56,"END":57,"statement":58,"empty":59,"parameter":60,"variable_name_list":61,"decl_item_list":62,"declaration":63,",":64,"assignment":65,"conditional":66,"iterative_loop":67,":=":68,"IF":69,"THEN":70,"statement_blocks":71,"ELSE":72,"+":73,"-":74,"/":75,"*":76,"%":77,"<>":78,"<":79,">":80,"<=":81,">=":82,"AND":83,"OR":84,"MOD":85,"DIV":86,"NOT":87,"function_parameter_list":88,"statement_ternary":89,"function_parameter":90,"for_loop":91,"while_loop":92,"repeat_until_loop":93,"FOR":94,"TO":95,"DO":96,"WHILE":97,"REPEAT":98,"UNTIL":99,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"IDENTIFIER",9:"INTEGER",11:"REAL",13:"STRING",15:"CHARACTER",17:"BOOLEAN",20:"TYPE",21:"ARRAY",22:"[",24:".",25:"]",26:"OF",27:"PROGRAM",29:";",33:"CONST",36:"=",46:"FUNCTION",48:"(",50:")",51:":",52:"PROCEDURE",53:"VAR",55:"BEGIN",57:"END",64:",",68:":=",69:"IF",70:"THEN",72:"ELSE",73:"+",74:"-",75:"/",76:"*",77:"%",78:"<>",79:"<",80:">",81:"<=",82:">=",83:"AND",84:"OR",85:"MOD",86:"DIV",87:"NOT",94:"FOR",95:"TO",96:"DO",97:"WHILE",98:"REPEAT",99:"UNTIL"},
productions_: [0,[3,2],[6,1],[8,1],[10,1],[12,1],[14,1],[16,1],[18,1],[18,1],[18,1],[18,1],[18,1],[19,1],[19,9],[4,5],[4,4],[28,1],[32,2],[34,1],[34,2],[35,4],[30,1],[30,2],[38,1],[37,5],[37,4],[37,4],[37,3],[31,4],[31,3],[31,2],[40,1],[40,2],[42,1],[42,1],[39,1],[39,1],[45,8],[45,5],[44,6],[44,3],[47,1],[43,2],[41,3],[41,3],[41,2],[41,4],[41,4],[41,3],[59,0],[49,1],[49,1],[49,3],[60,3],[54,2],[54,3],[62,2],[62,1],[63,3],[61,1],[61,3],[56,1],[56,2],[56,3],[58,1],[58,1],[58,1],[58,1],[58,1],[65,3],[65,6],[66,4],[66,6],[71,1],[71,1],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,2],[23,2],[23,3],[23,1],[23,1],[23,4],[23,4],[89,5],[89,3],[88,1],[88,1],[88,3],[90,1],[90,1],[67,1],[67,1],[67,1],[91,8],[92,4],[93,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
            return $$[$0-1] 
        
break;
case 2:
 
            this.$ = { 
                type: 'identifier', 
                value: $$[$0]
            }; 
        
break;
case 3: case 4: case 5: case 6: case 7: case 36: case 37: case 43: case 75: case 106:
 
            this.$ = $$[$0] 
        
break;
case 8:
 
            this.$ = { 
                value: $$[$0], 
                type: "integer"
            }; 
        
break;
case 9:
 
            this.$ = { 
                value: $$[$0], 
                type: "real"
            };
        
break;
case 10:
 
            this.$ = { 
                value: $$[$0], 
                type: "char"
            };
        
break;
case 11:
 
            this.$ = { 
                value: $$[$0], 
                type: "string"
            }; 
        
break;
case 12:
 
            this.$ = { 
                value: $$[$0], 
                type: "boolean"
            };
        
break;
case 13: case 67: case 68: case 69:
 
            this.$ = $$[$0]; 
        
break;
case 14:
 
            semantics.types($$[$0-6], ["integer"])
            semantics.types($$[$0-3], ["integer"])
            semantics.types($$[$0-3], ["integer", "real", "string", "boolean"])
            this.$ = { 
                name: $$[$0-8], 
                range: [$$[$0-6], $$[$0-3]], 
                data_type: $$[$0] 
            }; 
        
break;
case 15:
 
            $$[$0].routines = $$[$0-1]
            this.$ = { 
                type: 'program', 
                name: $$[$0-3], 
                routines: [$$[$0]]
            }; 
        
        
break;
case 16:
 
            this.$ = { 
                type: 'program', 
                name: $$[$0-2], 
                routines: [ $$[$0] ] 
            }; 
        
break;
case 17:
 
            this.$ = $$[$0]; 
            scope.add($$[$0].value);
        
break;
case 18:
 
            this.$ = $$[$0];
        
break;
case 19:
 
            this.$ = [$$[$0]]
        
break;
case 20:
 
            $$[$0].unshift($$[$0-1])
            this.$ = $$[$0]
        
break;
case 21:
 
            this.$ = {name: $$[$0-3], value: $$[$0-1].value, type: $$[$0-1].type}
            symbol.add($$[$0-3].value, $$[$0-1].type, null, null, true)
        
break;
case 22: case 102:
 
            this.$ = [ $$[$0] ]; 
        
break;
case 23:
 
            $$[$0].unshift($$[$0-1]); 
            this.$ = $$[$0]; 
        
break;
case 24:

            scope.pop();
        
break;
case 25:
 
            this.$ = { routines: $$[$0-2], body: $$[$0-1]};
            this.$ = Object.assign(this.$, $$[$0-4], $$[$0-3]); 
        
break;
case 26:
 
            this.$ = { routines: $$[$0-2], body: $$[$0-1]};
            this.$ = Object.assign(this.$, $$[$0-3]); 
        
break;
case 27:
 
            this.$ = { routines: [], body: $$[$0-1] };
            this.$ = Object.assign(this.$, $$[$0-3], $$[$0-2]); 
        
break;
case 28:
 
            this.$ = { routines: [], body: $$[$0-1] };
            this.$ = Object.assign(this.$, $$[$0-2]); 
        
break;
case 29:
 
            this.$ = { 
                type: 'procedure', 
                name: { 
                    value: 'main', 
                    type: 'identifier' 
                }, 
                body: $$[$0-1], 
                routines: $$[$0-2] 
            }; 
            this.$ = Object.assign(this.$, $$[$0-3]);
        
break;
case 30:
 
            this.$ = { 
                type: 'procedure', 
                name: { 
                    value: 'main', 
                    type: 'identifier' 
                }, 
                body: $$[$0-1] 
            }; 
            this.$ = Object.assign(this.$, $$[$0-2]);
        
break;
case 31:

            this.$ = { 
                type: 'procedure', 
                name: { 
                    value: 'main', 
                    type: 'identifier' 
                }, 
                body: $$[$0-1]
            }; 
        
break;
case 32: case 42: case 57: case 58: case 105: case 107: case 108:

            this.$ = $$[$0]
        
break;
case 33:
 
            this.$ = Object.assign($$[$0-1], $$[$0])
        
break;
case 34:
 
            this.$ = { const: $$[$0] }; 
        
break;
case 35:
 
            this.$ = { variables: $$[$0] }; 
        
break;
case 38:
 
            this.$ = { 
                type: $$[$0-7], 
                return_type: $$[$0-1], 
                params: $$[$0-4], 
                name: $$[$0-6] 
            };

            semantics.not_yet_declared(symbol, $$[$0-6], scope.peek())
            symbol.add($$[$0-6].value, 'routine', $$[$0-4], $$[$0-1])
            scope.add($$[$0-6].value)

            for (x in $$[$0-4]) {
                let variable = $$[$0-4][x]
                for (y in variable.name) {
                    let var_name = variable.name[y]
                    symbol.add(var_name.value, variable.data_type)
                }
            }
        
break;
case 39:
 
            this.$ = { 
                type: $$[$0-4], 
                return_type: $$[$0-1], 
                params: [], 
                name: $$[$0-3] 
            };

            semantics.not_yet_declared(symbol, $$[$0-3], scope.peek())
            symbol.add($$[$0-3].value, 'routine', null, $$[$0-1])
            scope.add($$[$0-3].value)
        
break;
case 40:
 
            this.$ = { 
                type: $$[$0-5], 
                params: $$[$0-2], 
                return_type: null, 
                name: $$[$0-4] 
            };
            
            semantics.not_yet_declared(symbol, $$[$0-4], scope.peek())
            symbol.add($$[$0-4].value, 'routine', $$[$0-2])
            scope.add($$[$0-4].value)

            for (x in $$[$0-2]) {
                let variable = $$[$0-2][x]
                for (y in variable.name) {
                    let var_name = variable.name[y]
                    symbol.add(var_name.value, variable.data_type)
                }
            }

        
break;
case 41:

            this.$ = { 
                type: $$[$0-2], 
                params: [], 
                return_type: null, 
                name: $$[$0-1] 
            };

            semantics.not_yet_declared(symbol, $$[$0-1], scope.peek())
            symbol.add($$[$0-1].value, 'routine')
            scope.add($$[$0-1].value)
        
break;
case 44:
 
            this.$ = $$[$0-1] 
        
break;
case 45: case 48:
 
            this.$ = [$$[$0-1]] 
        
break;
case 46: case 49: case 51:
 
            this.$ = [] 
        
break;
case 47:

            this.$ = $$[$0-1]
        
break;
case 50:
 
        this.$ = null 
    
break;
case 52: case 62: case 74:
 
            this.$ = [ $$[$0] ] 
        
break;
case 53: case 56: case 103:
 
            $$[$0].unshift($$[$0-2]); 
            this.$ = $$[$0]; 
        
break;
case 54:
 
            this.$ = {  
                type: $$[$0],
                data_type: $$[$0], 
                name: $$[$0-2] 
            } 
        
break;
case 55:
 
            this.$ = [ $$[$0-1] ]
        
break;
case 59:
 
            this.$ = { type: $$[$0], data_type: $$[$0], name: $$[$0-2] } 

            for (x in $$[$0-2]) {
                semantics.not_yet_declared(symbol, $$[$0-2][x], scope.peek())
                symbol.add($$[$0-2][x].value, $$[$0])
            }
        
break;
case 60:
 
            this.$ = [ $$[$0] ]
        
break;
case 61:
 
            $$[$0].unshift($$[$0-2]); 
            this.$ = $$[$0] 
        
break;
case 63:
 
            this.$ = [ $$[$0-1] ] 
        
break;
case 64:
 
            $$[$0].unshift($$[$0-2]); this.$ = $$[$0] 
        
break;
case 65:


        
break;
case 66:

            this.$ = $$[$0];
        
break;
case 70:
 
            semantics.declared(symbol, $$[$0-2])
            var1 = symbol.lookup($$[$0-2])
            semantics.same_types(var1, $$[$0], {"string":"char", "real":"integer"})
            semantics.not_constant(var1)
            this.$ = { 
                    type: 'binary operator', 
                    data_type: 'boolean',
                    operator: ':=', 
                    args: [$$[$0-2], $$[$0]],
                }
        
break;
case 71:

            semantics.declared(symbol, $$[$0-5])
            var1 = symbol.lookup($$[$0-5])
            semantics.same_types(var1, $$[$0])

            this.$ = {
                type: 'binary operator',
                data_type: 'boolean',
                operator: ':=',
                args: [
                    {
                        type: 'array access',
                        name: $$[$0-5].value, 
                        data_type: var1.data_type, 
                        args: $$[$0-3]
                    },
                    $$[$0]
                ]
            }
        
break;
case 72:
 
            this.$ = { 
                type: 'conditional operator', 
                operator: 'if', 
                condition: $$[$0-2], 
                if: $$[$0]
            } 
        
break;
case 73:
 
            this.$ = { 
                type: 'conditional operator', 
                operator: 'if-else', 
                condition: $$[$0-4], 
                if: $$[$0-2], 
                else: $$[$0]
            } 
        
break;
case 76:
 
            semantics.same_types($$[$0-2], $$[$0])
            semantics.types($$[$0-2], ["char", "string", "real", "integer"]);

            this.$ = { 
                type: 'binary operator', 
                data_type: semantics.assign($$[$0-2].data_type, $$[$0].data_type),
                operator: $$[$0-1], 
                args: [$$[$0-2], $$[$0]] 
            } 
        
break;
case 77:
 
            semantics.same_types($$[$0-2], $$[$0])
            semantics.types($$[$0-2], ["integer", "real"]);  
            this.$ = { 
                type: 'binary operator', 
                data_type: $$[$0-2].data_type,
                operator: $$[$0-1], 
                args: [$$[$0-2], $$[$0]] 
            } 
        
break;
case 78: case 80:
 
            semantics.same_types($$[$0-2], $$[$0])
            semantics.types($$[$0-2], ["real"]);
            this.$ = { 
                type: 'binary operator', 
                data_type: $$[$0-2].data_type,
                operator: $$[$0-1], 
                args: [$$[$0-2], $$[$0]] 
            } 
        
break;
case 79:
 
            semantics.same_types($$[$0-2], $$[$0])
            semantics.types($$[$0-2], ["integer", "real"]);
            this.$ = { 
                type: 'binary operator', 
                data_type: $$[$0-2].data_type,
                operator: $$[$0-1], 
                args: [$$[$0-2], $$[$0]] 
            } 
        
break;
case 81:
 
            semantics.same_types($$[$0-2], $$[$0])
            
            this.$ = { 
                type: 'binary operator', 
                data_type: 'boolean',
                operator: $$[$0-1], 
                args: [$$[$0-2], $$[$0]] 
            } 
        
break;
case 82: case 84: case 85: case 86:
 
            semantics.same_types($$[$0-2], $$[$0])
            this.$ = { 
                type: 'binary operator', 
                data_type: 'boolean',
                operator: $$[$0-1], 
                args: [$$[$0-2], $$[$0]] 
            } 
        
break;
case 83:
 
            semantics.same_types($$[$0-2], $$[$0])
            this.$ = { 
                type: 'binary operator',
                data_type: 'boolean',
                operator: $$[$0-1], 
                args: [$$[$0-2], $$[$0]] 
            } 
        
break;
case 87:
 
            semantics.same_types($$[$0-2], $$[$0])
            semantics.types($$[$0-2], ["boolean"]);
            this.$ = { 
                type: 'binary operator', 
                data_type: 'boolean',
                operator: $$[$0-1], 
                args: [$$[$0-2], $$[$0]] 
            } 
        
break;
case 88:
 
            semantics.same_types($$[$0-2], $$[$0])
            semantics.types($$[$0-2], ["boolean"]);
            this.$ = { 
                type: 'binary operator', 
                operator: $$[$0-1], 
                args: [$$[$0-2], $$[$0]] 
            } 
        
break;
case 89: case 90:
 
            semantics.same_types($$[$0-2], $$[$0])
            semantics.types($$[$0-2], ["integer"]);
            this.$ = { 
                type: 'binary operator', 
                data_type: $$[$0-2].data_type,
                operator: $$[$0-1], 
                args: [$$[$0-2], $$[$0]] 
            } 
        
break;
case 91:
 
            semantics.types($$[$0], ["boolean"]);

            this.$ = { 
                type: 'unary operator', 
                data_type: "boolean",
                operator: $$[$0-1], 
                args: [$$[$0]] 
            } 
        
break;
case 92: case 93:
 
            semantics.types($$[$0], ["integer", "real"]);
            this.$ = { 
                type: 'unary operator', 
                data_type: $$[$0].data_type,
                operator: $$[$0-1], 
                args: [$$[$0]] } 
            
break;
case 94:
 
            this.$ = $$[$0-1]
        
break;
case 95:
 
            $$[$0].data_type = $$[$0].type;
            this.$ = $$[$0]
         
break;
case 96:
 
            this.$ = semantics.declared(symbol, $$[$0], scope);
            this.$ = this.$ ? this.$ : symbol.lookup($$[$0])
            this.$.type = this.$.type ? this.$.type : "identifier"
        
break;
case 97:
 
            semantics.declared(symbol, $$[$0-3],  scope);
            this.$ = { 
                type: 'call',
                return_type: symbol.lookup($$[$0-3]) ? symbol.lookup($$[$0-3]).return_type : null,
                name: $$[$0-3], 
                args: $$[$0-1] 
            }
        
break;
case 98:
  
            semantics.types(symbol.lookup($$[$0-3]), ["array"])
            semantics.types($$[$0-1], ["integer"])
            
            this.$ = { 
                type: 'array access',
                name: $$[$0-3].value, 
                data_type: symbol.lookup($$[$0-3]).data_type, 
                args: $$[$0-1] 
            } 
        
break;
case 99:

            semantics.types($$[$0-4], ["real"])
            semantics.types($$[$0-2], ["integer"])
            semantics.types($$[$0], ["integer"])
            this.$ = {
                type: 'ternary operator',
                data_type: 'string',
                operator: $$[$0-3],
                args: [$$[$0-4], $$[$0-2], $$[$0]]
            }
        
break;
case 100:

            semantics.types($$[$0], ["integer"])
            this.$ = {
                type: 'binary operator',
                data_type: 'string',
                operator: $$[$0-1],
                args: [$$[$0-2], $$[$0]]
            }
        
break;
case 101:
 
            this.$ = [ ]; 
        
break;
case 104:
 
            this.$ = $$[$0]
        
break;
case 109:
 
            semantics.declared(symbol, $$[$0-6], scope.peek())
            semantics.types($$[$0-4], ["integer"])
            semantics.types($$[$0-2], ["integer"])
            this.$ = { 
                type: "iterative operator", 
                operator: $$[$0-7], 
                statements: $$[$0], 
                variable: $$[$0-6], 
                range: [$$[$0-4], $$[$0-2]] 
            } 
        
break;
case 110:
 
            semantics.types($$[$0-2], ["boolean"])
            this.$ = { 
                type: "iterative operator", 
                operator: $$[$0-3], 
                statements: $$[$0],
                condition: $$[$0-2]
            } 
        
break;
case 111:

            semantics.types($$[$0], ["boolean"])
            this.$ = { 
                type: "iterative operator", 
                operator: "repeat-until", 
                statements: $$[$0-2],
                condition: $$[$0]
            } 
        
break;
}
},
table: [{3:1,4:2,27:[1,3]},{1:[3]},{5:[1,4]},{6:6,7:$V0,28:5},{1:[2,1]},{29:[1,8]},{29:[2,17]},o([22,24,25,29,36,48,50,51,57,64,68,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,95,96,99],[2,2]),{30:9,31:10,32:19,33:$V1,37:11,39:14,40:12,41:13,42:15,43:20,44:17,45:18,46:$V2,52:$V3,53:$V4,55:$V5},{31:25,32:19,33:$V1,40:12,41:13,42:15,43:20,53:$V4,55:$V5},{5:[2,16]},o($V6,[2,22],{37:11,39:14,44:17,45:18,30:26,46:$V2,52:$V3}),{30:27,37:11,39:14,41:28,44:17,45:18,46:$V2,52:$V3,55:$V5},{24:[1,29]},{30:31,32:19,33:$V1,37:11,39:14,40:30,41:32,42:15,43:20,44:17,45:18,46:$V2,52:$V3,53:$V4,55:$V5},o($V7,[2,32],{42:15,32:19,43:20,40:33,33:$V1,53:$V4}),{6:42,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:39,29:[1,37],48:$Vd,56:34,57:[1,36],58:35,65:38,66:40,67:41,69:$Ve,73:$Vf,74:$Vg,87:$Vh,91:49,92:50,93:51,94:$Vi,97:$Vj,98:$Vk},o($Vl,[2,36]),o($Vl,[2,37]),o($Vl,[2,34]),o($Vl,[2,35]),{6:66,7:$V0,47:65},{6:66,7:$V0,47:67},{6:70,7:$V0,34:68,35:69},{6:76,7:$V0,53:$Vm,54:71,61:75,62:72,63:74},{5:[2,15]},o($V6,[2,23]),{41:77,55:$V5},{24:[1,78]},{5:[2,31]},{30:79,37:11,39:14,41:80,44:17,45:18,46:$V2,52:$V3,55:$V5},{41:81,55:$V5},{29:$Vn,38:82},o($V7,[2,33]),{57:[1,84]},{29:$Vo,57:[1,85]},o($Vp,[2,46]),{6:42,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:39,29:$Vq,48:$Vd,56:87,57:[1,89],58:88,65:38,66:40,67:41,69:$Ve,73:$Vf,74:$Vg,87:$Vh,91:49,92:50,93:51,94:$Vi,97:$Vj,98:$Vk},o($Vr,[2,66]),o($Vr,[2,67],{36:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG}),o($Vr,[2,68]),o($Vr,[2,69]),o($VH,$VI,{22:[1,107],48:$VJ,68:[1,106]}),{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:109,48:$Vd,73:$Vf,74:$Vg,87:$Vh},{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:111,48:$Vd,73:$Vf,74:$Vg,87:$Vh},{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:112,48:$Vd,73:$Vf,74:$Vg,87:$Vh},{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:113,48:$Vd,73:$Vf,74:$Vg,87:$Vh},o($VK,[2,95]),{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:114,48:$Vd,73:$Vf,74:$Vg,87:$Vh},o($Vr,[2,106]),o($Vr,[2,107]),o($Vr,[2,108]),o($VK,[2,8]),o($VK,[2,9]),o($VK,[2,10]),o($VK,[2,11]),o($VK,[2,12]),{6:115,7:$V0},{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:116,48:$Vd,73:$Vf,74:$Vg,87:$Vh},{6:42,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:39,29:$VL,48:$Vd,56:117,58:118,65:38,66:40,67:41,69:$Ve,73:$Vf,74:$Vg,87:$Vh,91:49,92:50,93:51,94:$Vi,97:$Vj,98:$Vk},o($VK,[2,3]),o($VK,[2,4]),o($VK,[2,6]),o($VK,[2,5]),o($VK,[2,7]),{29:[1,120],48:[1,119]},o([29,48,51],[2,42]),{48:[1,121],51:[1,122]},o($Vl,[2,18]),o($Vl,[2,19],{35:69,6:70,34:123,7:$V0}),{36:[1,124]},o($Vl,[2,43]),{29:[1,125]},{6:76,7:$V0,61:75,63:126},{29:[2,58]},{51:[1,127]},{51:[2,60],64:[1,128]},{24:[1,129]},{5:[2,30]},{41:130,55:$V5},{29:$Vn,38:131},{29:$Vn,38:132},o($Vl,[2,28]),o($Vl,[2,24]),o($Vp,[2,44]),o($Vp,[2,45]),o($VM,[2,63],{65:38,23:39,66:40,67:41,6:42,18:47,91:49,92:50,93:51,8:52,10:53,14:54,12:55,16:56,58:118,56:133,7:$V0,9:$V8,11:$V9,13:$Va,15:$Vb,17:$Vc,29:$VL,48:$Vd,69:$Ve,73:$Vf,74:$Vg,87:$Vh,94:$Vi,97:$Vj,98:$Vk}),{57:[1,134]},{29:$Vo,57:[1,135]},o($Vp,[2,49]),o($Vr,$Vq),{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:136,48:$Vd,73:$Vf,74:$Vg,87:$Vh},{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:137,48:$Vd,73:$Vf,74:$Vg,87:$Vh},{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:138,48:$Vd,73:$Vf,74:$Vg,87:$Vh},{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:139,48:$Vd,73:$Vf,74:$Vg,87:$Vh},{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:140,48:$Vd,73:$Vf,74:$Vg,87:$Vh},{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:141,48:$Vd,73:$Vf,74:$Vg,87:$Vh},{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:142,48:$Vd,73:$Vf,74:$Vg,87:$Vh},{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:143,48:$Vd,73:$Vf,74:$Vg,87:$Vh},{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:144,48:$Vd,73:$Vf,74:$Vg,87:$Vh},{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:145,48:$Vd,73:$Vf,74:$Vg,87:$Vh},{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:146,48:$Vd,73:$Vf,74:$Vg,87:$Vh},{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:147,48:$Vd,73:$Vf,74:$Vg,87:$Vh},{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:148,48:$Vd,73:$Vf,74:$Vg,87:$Vh},{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:149,48:$Vd,73:$Vf,74:$Vg,87:$Vh},{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:150,48:$Vd,73:$Vf,74:$Vg,87:$Vh},{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:151,48:$Vd,73:$Vf,74:$Vg,87:$Vh},{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:152,48:$Vd,73:$Vf,74:$Vg,87:$Vh},{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:156,48:$Vd,50:$VN,59:154,73:$Vf,74:$Vg,87:$Vh,88:153,89:157,90:155},o($VK,[2,91]),o($VK,$VI,{22:[1,158],48:$VJ}),o($VK,[2,92]),o($VK,[2,93]),{36:$Vs,50:[1,159],73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG},{36:$Vs,70:[1,160],73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG},{68:[1,161]},{36:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,96:[1,162]},{99:[1,163]},o($VM,[2,62],{29:$Vo}),{6:76,7:$V0,49:164,50:$VN,59:165,60:166,61:167},o($Vl,[2,41]),{6:76,7:$V0,49:168,50:$VN,59:165,60:166,61:167},{19:169,20:$VO,21:$VP},o($Vl,[2,20]),{8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:172},o([33,46,52,55],[2,55],{62:72,63:74,61:75,6:76,54:173,7:$V0,53:$Vm}),{29:[2,57]},{19:174,20:$VO,21:$VP},{6:76,7:$V0,61:175},{5:[2,29]},{29:$Vn,38:176},o($Vl,[2,27]),o($Vl,[2,26]),o($VM,[2,64]),o($Vp,[2,47]),o($Vp,[2,48]),o($VQ,[2,76],{75:$Vv,76:$Vw,77:$Vx,83:$VD,85:$VF,86:$VG}),o($VQ,[2,77],{75:$Vv,76:$Vw,77:$Vx,83:$VD,85:$VF,86:$VG}),o($VK,[2,78]),o($VK,[2,79]),o($VK,[2,80]),o($VR,[2,81],{73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,83:$VD,84:$VE,85:$VF,86:$VG}),o($VR,[2,82],{73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,83:$VD,84:$VE,85:$VF,86:$VG}),o($VS,[2,83],{36:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,83:$VD,84:$VE,85:$VF,86:$VG}),o($VS,[2,84],{36:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,83:$VD,84:$VE,85:$VF,86:$VG}),o($VS,[2,85],{36:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,83:$VD,84:$VE,85:$VF,86:$VG}),o($VS,[2,86],{36:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,83:$VD,84:$VE,85:$VF,86:$VG}),o($VK,[2,87]),o($VQ,[2,88],{75:$Vv,76:$Vw,77:$Vx,83:$VD,85:$VF,86:$VG}),o($VK,[2,89]),o($VK,[2,90]),o($Vr,[2,70],{36:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG}),{25:[1,177],36:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG},{50:[1,178]},{50:[2,101]},{50:[2,102],64:[1,179]},o($VT,[2,104],{36:$Vs,51:[1,180],73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG}),o($VT,[2,105]),{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:181,48:$Vd,73:$Vf,74:$Vg,87:$Vh},o($VK,[2,94]),{6:42,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:39,29:$VL,41:184,48:$Vd,55:$V5,58:183,65:38,66:40,67:41,69:$Ve,71:182,73:$Vf,74:$Vg,87:$Vh,91:49,92:50,93:51,94:$Vi,97:$Vj,98:$Vk},{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:185,48:$Vd,73:$Vf,74:$Vg,87:$Vh},{6:42,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:39,29:$VL,41:184,48:$Vd,55:$V5,58:183,65:38,66:40,67:41,69:$Ve,71:186,73:$Vf,74:$Vg,87:$Vh,91:49,92:50,93:51,94:$Vi,97:$Vj,98:$Vk},{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:187,48:$Vd,73:$Vf,74:$Vg,87:$Vh},{50:[1,188]},{50:[2,51]},{29:[1,189],50:[2,52]},{51:[1,190]},{50:[1,191]},{29:[1,192]},o($VU,[2,13]),{22:[1,193]},{29:[1,194]},o($Vl,[2,56]),{29:[2,59]},{51:[2,61]},o($Vl,[2,25]),o($VH,$VV,{68:[1,195]}),o($VK,[2,97]),{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:156,48:$Vd,50:$VN,59:154,73:$Vf,74:$Vg,87:$Vh,88:196,89:157,90:155},{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:197,48:$Vd,73:$Vf,74:$Vg,87:$Vh},{25:[1,198],36:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG},o([29,57,99],[2,72],{72:[1,199]}),o($Vr,[2,74]),o($Vr,[2,75]),{36:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,95:[1,200]},o($Vr,[2,110]),o($Vr,[2,111],{36:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG}),{29:[1,201]},{6:76,7:$V0,49:202,50:$VN,59:165,60:166,61:167},{19:203,20:$VO,21:$VP},{51:[1,204]},o($Vl,[2,39]),{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:205,48:$Vd,73:$Vf,74:$Vg,87:$Vh},o([7,33,46,52,53,55],[2,21]),{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:206,48:$Vd,73:$Vf,74:$Vg,87:$Vh},{50:[2,103]},o($VT,[2,100],{36:$Vs,51:[1,207],73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG}),o($VK,$VV),{6:42,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:39,29:$VL,41:184,48:$Vd,55:$V5,58:183,65:38,66:40,67:41,69:$Ve,71:208,73:$Vf,74:$Vg,87:$Vh,91:49,92:50,93:51,94:$Vi,97:$Vj,98:$Vk},{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:209,48:$Vd,73:$Vf,74:$Vg,87:$Vh},o($Vl,[2,40]),{50:[2,53]},o($VU,[2,54]),{19:210,20:$VO,21:$VP},{24:[1,211],36:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG},o($Vr,[2,71],{36:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG}),{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:212,48:$Vd,73:$Vf,74:$Vg,87:$Vh},o($Vr,[2,73]),{36:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG,96:[1,213]},{29:[1,214]},{24:[1,215]},o($VT,[2,99],{36:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG}),{6:42,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:39,29:$VL,41:184,48:$Vd,55:$V5,58:183,65:38,66:40,67:41,69:$Ve,71:216,73:$Vf,74:$Vg,87:$Vh,91:49,92:50,93:51,94:$Vi,97:$Vj,98:$Vk},o($Vl,[2,38]),{6:110,7:$V0,8:52,9:$V8,10:53,11:$V9,12:55,13:$Va,14:54,15:$Vb,16:56,17:$Vc,18:47,23:217,48:$Vd,73:$Vf,74:$Vg,87:$Vh},o($Vr,[2,109]),{25:[1,218],36:$Vs,73:$Vt,74:$Vu,75:$Vv,76:$Vw,77:$Vx,78:$Vy,79:$Vz,80:$VA,81:$VB,82:$VC,83:$VD,84:$VE,85:$VF,86:$VG},{26:[1,219]},{20:[1,220]},o($VU,[2,14])],
defaultActions: {4:[2,1],6:[2,17],10:[2,16],25:[2,15],29:[2,31],74:[2,58],78:[2,30],126:[2,57],129:[2,29],154:[2,101],165:[2,51],174:[2,59],175:[2,61],196:[2,103],202:[2,53]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    let scope = {
        data: [        ],
        add (item) {
            scope.data.unshift(item)
        },
        pop () {
            return scope.data.shift()
        },
        peek () {
            return scope.data[0]
        },
    }

    let symbol = {
        data: {},
        lookup (symbol_item) {
            for (i in scope.data) {
                block = scope.data[i]
                let symbols = symbol.data[block]
                
                for (j in symbols) {
                    sym = symbols[j]
                    if (sym.value == symbol_item.value) {
                        sym.scope = block
                        return sym
                    }
                }
            }
            return null;
        },
        add (symbol_item, type, args, return_type, constant) {
            if (!symbol.data[scope.peek()])
                symbol.data[scope.peek()] = []

            symbol.data[scope.peek() ? scope.peek() : "main"].push({
                value: symbol_item,
                return_type: return_type,
                data_type: type,
                args: args,
                constant: constant ? constant : false
            })
        },
        debug () {
            console.log("-- SYMBOL TABLE --")
            console.log(JSON.stringify(symbol.data, null, 2))
            console.log("------------------");
        }
    }

    let error = {
        throw (message) {
            throw new Error (message)
        }
    }

    let semantics = require('./semantics');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 29;
break;
case 1:/* skip whitespace */
break;
case 2:return 27;
break;
case 3:return 53;
break;
case 4:return 55;
break;
case 5:return 57;
break;
case 6:return 69;
break;
case 7:return 26;
break;
case 8:return 70;
break;
case 9:return 72;
break;
case 10:return 97;
break;
case 11:return 96;
break;
case 12:return 95;
break;
case 13:return 94;
break;
case 14:return 97;
break;
case 15:return 98;
break;
case 16:return 99;
break;
case 17:return 46;
break;
case 18:return 52;
break;
case 19:return 33;
break;
case 20:return 21;
break;
case 21:return '{';
break;
case 22:return '}';
break;
case 23:return '#';
break;
case 24:return '?';
break;
case 25:return 68;
break;
case 26:return 48;
break;
case 27:return 50;
break;
case 28:return 22;
break;
case 29:return 25;
break;
case 30:return 76;
break;
case 31:return 75;
break;
case 32:return 77;
break;
case 33:return 73;
break;
case 34:return 74;
break;
case 35:return 81;
break;
case 36:return 78;
break;
case 37:return 79;
break;
case 38:return 82;
break;
case 39:return 80;
break;
case 40:return 36;
break;
case 41:return 64;
break;
case 42:return 51;
break;
case 43:return 24;
break;
case 44:return 85;
break;
case 45:return 86;
break;
case 46:return 83;
break;
case 47:return 84;
break;
case 48:return 87;
break;
case 49:return 5;
break;
case 50:return 11;
break;
case 51:return 9;
break;
case 52:return 17;
break;
case 53:return 15;
break;
case 54:return 13;
break;
case 55:return 7;
break;
case 56:return 5;
break;
case 57:return 20;
break;
}
},
rules: [/^(?:;)/,/^(?:\s+)/,/^(?:program\b)/,/^(?:var\b)/,/^(?:begin\b)/,/^(?:end\b)/,/^(?:if\b)/,/^(?:of\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:to\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:repeat\b)/,/^(?:until\b)/,/^(?:function\b)/,/^(?:procedure\b)/,/^(?:const\b)/,/^(?:array\b)/,/^(?:\{)/,/^(?:\})/,/^(?:#)/,/^(?:\?)/,/^(?::=)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\+)/,/^(?:-)/,/^(?:<=)/,/^(?:<>)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:=)/,/^(?:,)/,/^(?::)/,/^(?:\.)/,/^(?:mod\b)/,/^(?:div\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:not\b)/,/^(?:$)/,/^(?:[\+\-]?\d+\.\d+)/,/^(?:[\+\-]?\d+)/,/^(?:true|false\b)/,/^(?:'.')/,/^(?:'(\\.|[^'\\])*')/,/^(?:[$a-zA-Z_]+[A-Za-z0-9_]*)/,/^(?:$)/,/^(?:char|integer|boolean|string|real\b)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = pascalet;
exports.Parser = pascalet.Parser;
exports.parse = function () { return pascalet.parse.apply(pascalet, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}