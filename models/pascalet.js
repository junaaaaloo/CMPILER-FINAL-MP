/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var pascalet = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,23],$V2=[1,22],$V3=[1,21],$V4=[1,24],$V5=[1,16],$V6=[33,53,55],$V7=[46,52,55],$V8=[1,54],$V9=[1,55],$Va=[1,57],$Vb=[1,56],$Vc=[1,58],$Vd=[1,43],$Ve=[1,46],$Vf=[1,42],$Vg=[1,41],$Vh=[1,53],$Vi=[33,46,52,53,55],$Vj=[1,75],$Vk=[1,78],$Vl=[24,29,57,71],$Vm=[29,57,71],$Vn=[1,85],$Vo=[1,94],$Vp=[1,80],$Vq=[1,81],$Vr=[1,82],$Vs=[1,83],$Vt=[1,84],$Vu=[1,86],$Vv=[1,87],$Vw=[1,88],$Vx=[1,89],$Vy=[1,90],$Vz=[1,91],$VA=[1,92],$VB=[1,93],$VC=[1,95],$VD=[1,96],$VE=[24,25,29,36,50,51,57,63,67,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,91,92],$VF=[24,25,29,36,50,51,57,63,67,69,71,72,73,77,78,79,80,81,83,91,92],$VG=[2,46],$VH=[1,151],$VI=[1,152],$VJ=[24,25,29,36,50,51,57,63,67,69,71,72,73,74,75,76,77,78,79,80,81,82,83,85,86,91,92],$VK=[24,25,29,36,50,51,57,63,67,69,71,77,78,79,80,81,91,92],$VL=[24,25,29,50,51,57,63,67,69,71,78,79,80,81,91,92],$VM=[29,50];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"pascal":3,"program":4,"EOF":5,"identifier":6,"IDENTIFIER":7,"integer":8,"INTEGER":9,"real":10,"REAL":11,"string":12,"STRING":13,"character":14,"CHARACTER":15,"boolean":16,"BOOLEAN":17,"literal":18,"type":19,"TYPE":20,"ARRAY":21,"[":22,"expression":23,".":24,"]":25,"OF":26,"PROGRAM":27,"program_name":28,";":29,"routine_list":30,"main":31,"constant_list":32,"CONST":33,"constant_items":34,"constant":35,"=":36,"routine":37,"end_block":38,"header":39,"declarations_list":40,"body":41,"declarations_item":42,"routine_variables":43,"procedure_header":44,"function_header":45,"FUNCTION":46,"routine_name":47,"(":48,"parameters_list":49,")":50,":":51,"PROCEDURE":52,"VAR":53,"declaration_list":54,"BEGIN":55,"statement_list":56,"END":57,"statement":58,"empty":59,"parameter":60,"variable_name_list":61,"declaration":62,",":63,"assignment":64,"conditional":65,"iterative_loop":66,":=":67,"IF":68,"THEN":69,"statement_blocks":70,"ELSE":71,"+":72,"-":73,"/":74,"*":75,"%":76,"<>":77,"<":78,">":79,"<=":80,">=":81,"AND":82,"OR":83,"NOT":84,"MOD":85,"DIV":86,"function_parameter_list":87,"function_parameter":88,"for_loop":89,"FOR":90,"TO":91,"DO":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"IDENTIFIER",9:"INTEGER",11:"REAL",13:"STRING",15:"CHARACTER",17:"BOOLEAN",20:"TYPE",21:"ARRAY",22:"[",24:".",25:"]",26:"OF",27:"PROGRAM",29:";",33:"CONST",36:"=",46:"FUNCTION",48:"(",50:")",51:":",52:"PROCEDURE",53:"VAR",55:"BEGIN",57:"END",63:",",67:":=",68:"IF",69:"THEN",71:"ELSE",72:"+",73:"-",74:"/",75:"*",76:"%",77:"<>",78:"<",79:">",80:"<=",81:">=",82:"AND",83:"OR",84:"NOT",85:"MOD",86:"DIV",90:"FOR",91:"TO",92:"DO"},
productions_: [0,[3,2],[6,1],[8,1],[10,1],[12,1],[14,1],[16,1],[18,1],[18,1],[18,1],[18,1],[18,1],[19,1],[19,9],[4,3],[4,5],[4,4],[28,1],[32,2],[34,1],[34,2],[35,4],[30,1],[30,2],[38,1],[37,5],[37,4],[37,4],[37,3],[31,4],[31,3],[31,2],[40,1],[40,2],[42,1],[42,1],[39,1],[39,1],[45,8],[44,6],[47,1],[43,2],[41,3],[41,3],[41,2],[59,0],[49,1],[49,1],[49,3],[60,3],[54,2],[54,3],[62,3],[61,1],[61,3],[56,1],[56,2],[56,3],[58,1],[58,1],[58,1],[58,1],[64,3],[65,4],[65,6],[70,1],[70,1],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,2],[23,3],[23,1],[23,1],[23,4],[23,4],[87,1],[87,1],[87,3],[88,1],[66,1],[89,8]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
            return $$[$0-1] 
        
break;
case 2:
 
            this.$ = { 
                type: 'identifier', 
                value: $$[$0]
            }; 
        
break;
case 3: case 4: case 5: case 6: case 7: case 37: case 38: case 42: case 67: case 95: case 96:
 
            this.$ = $$[$0] 
        
break;
case 8:
 
            this.$ = { 
                value: $$[$0], 
                type: "integer"
            }; 
        
break;
case 9:
 
            this.$ = { 
                value: $$[$0], 
                type: "real"
            };
        
break;
case 10:
 
            this.$ = { 
                value: $$[$0], 
                type: "character"
            };
        
break;
case 11:
 
            this.$ = { 
                value: $$[$0], 
                type: "string"
            }; 
        
break;
case 12:
 
            this.$ = { 
                value: $$[$0], 
                type: "boolean"
            };
        
break;
case 13: case 33: case 59: case 60: case 61: case 62:
 
            this.$ = $$[$0]; 
        
break;
case 14:
 
            this.$ = { 
                name: $$[$0-8], 
                range: [$$[$0-6], $$[$0-3]], 
                type: $$[$0] 
            }; 
        
break;
case 15:
 
            this.$ = { 
                type: 'program', 
                name: $$[$0-1], 
                body: [ ] 
            }; 
        
        
break;
case 16:
 
            $$[$0-1].unshift($$[$0]); 
            this.$ = { 
                type: 'program', 
                name: $$[$0-3], 
                body: $$[$0-1]
            }; 
        
        
break;
case 17:
 
            this.$ = { 
                type: 'program', 
                name: $$[$0-2], 
                body: [ $$[$0] ] 
            }; 
        
break;
case 18:
 
            this.$ = $$[$0]; 
            scope.add($$[$0].value);
        
break;
case 19:
 
            this.$ = $$[$0];
        
break;
case 20:
 
            this.$ = [$$[$0]]
        
break;
case 21:
 
            $$[$0].unshift($$[$0-1])
            this.$ = $$[$0]
        
break;
case 22:
 
            this.$ = {name: $$[$0-3], value: $$[$0-1].value, type: $$[$0-1].type}
            symbol.add($$[$0-3].value, $$[$0-1].type)
            
        
break;
case 23: case 93:
 
            this.$ = [ $$[$0] ]; 
        
break;
case 24:
 
            $$[$0].unshift($$[$0-1]); 
            this.$ = $$[$0]; 
        
break;
case 25:

            scope.pop();
        
break;
case 26:
 
            this.$ = { type: 'procedure', routines: $$[$0-2], body: $$[$0-1]};
            this.$ = Object.assign(this.$, $$[$0-4], $$[$0-3]); 
        
break;
case 27:
 
            this.$ = { type: 'procedure', routines: $$[$0-2], body: $$[$0-1]};
            this.$ = Object.assign(this.$, $$[$0-3]); 
        
break;
case 28:
 
            this.$ = { type: 'procedure', routines: [], body: $$[$0-1] };
            this.$ = Object.assign(this.$, $$[$0-3], $$[$0-2]); 
        
break;
case 29:
 
            this.$ = { type: 'procedure', routines: [], body: $$[$0-1] };
            this.$ = Object.assign(this.$, $$[$0-2]); 
        
break;
case 30:
 
            this.$ = { 
                type: 'procedure', 
                name: { 
                    value: 'main', 
                    type: 'identifier' 
                }, 
                body: $$[$0-1], 
                routines: $$[$0-2] 
            }; 
            this.$ = Object.assign(this.$, $$[$0-3]);
        
break;
case 31:
 
            this.$ = { 
                type: 'procedure', 
                name: { 
                    value: 'main', 
                    type: 'identifier' 
                }, 
                body: $$[$0-1] 
            }; 
            this.$ = Object.assign(this.$, $$[$0-2]);
        
break;
case 32:

            this.$ = { 
                type: 'procedure', 
                name: { 
                    value: 'main', 
                    type: 'identifier' 
                }, 
                body: $$[$0-1]
            }; 
        
break;
case 34:
 
            this.$ = Object.assign($$[$0-1], $$[$0]) 
        
break;
case 35:
 
            this.$ = { const: $$[$0] }; 
        
break;
case 36:
 
            this.$ = { variables: $$[$0] }; 
        
break;
case 39:
 
            this.$ = { 
                type: $$[$0-7], 
                return: $$[$0-1], 
                params: $$[$0-4], 
                name: $$[$0-6] 
            };
        
break;
case 40:
 
            this.$ = { 
                type: $$[$0-5], 
                params: $$[$0-2], 
                name: $$[$0-4] 
            };
        
break;
case 41:

            this.$ = $$[$0];
            symbol.add($$[$0].value, $$[$0].type);
            scope.add($$[$0].value);
        
break;
case 43:
 
            this.$ = $$[$0-1] 
        
break;
case 44:
 
            this.$ = [$$[$0-1]] 
        
break;
case 45: case 47:
 
            this.$ = [] 
        
break;
case 46:
 
        this.$ = null 
    
break;
case 48: case 56: case 66:
 
            this.$ = [ $$[$0] ] 
        
break;
case 49:
 
            $$[$0].unshift($$[$0-2]); this.$ = $$[$0]; 
        
break;
case 50:
 
            this.$ = { 
                type: $$[$0], 
                name: $$[$0-2] 
            } 
            for (i in $$[$0-2]) 
                symbol.add($$[$0-2][i].value, $$[$0])
        
break;
case 51:
 
            this.$ = [ $$[$0-1] ]
        
break;
case 52: case 94:
 
            $$[$0].unshift($$[$0-2]); 
            this.$ = $$[$0]; 
        
break;
case 53:
 
            this.$ = { type: $$[$0], name: $$[$0-2] } 
            for (i in $$[$0-2]) 
                symbol.add($$[$0-2][i].value, $$[$0])
            
        
break;
case 54:
 
            this.$ = [ $$[$0] ]
        
break;
case 55:
 
            $$[$0].unshift($$[$0-2]); 
            this.$ = $$[$0] 
        
break;
case 57:
 
            this.$ = [ $$[$0-1] ] 
        
break;
case 58:
 
            $$[$0].unshift($$[$0-2]); this.$ = $$[$0] 
        
break;
case 63:
 
            this.$ = { 
                    type: 'binary operator', 
                    operator: ':=', 
                    args: [$$[$0-2], $$[$0]] 
                } 
        
break;
case 64:
 
            this.$ = { 
                type: 'conditional operator', 
                operator: 'if', 
                condition: $$[$0-2], 
                if: $$[$0]
            } 
        
break;
case 65:
 
            this.$ = { 
                type: 'conditional operator', 
                operator: 'if-else', 
                condition: $$[$0-4], 
                if: $$[$0-2], 
                else: $$[$0]
            } 
        
break;
case 68:
 
            semantics.same_types($$[$0-2], $$[$0])
            semantics.types($$[$0-2], ["string", "real", "integer"]);
            this.$ = { 
                type: 'binary operator', 
                data_type: $$[$0-2].data_type,
                operator: $$[$0-1], 
                args: [$$[$0-2], $$[$0]] 
            } 
        
break;
case 69:
 
            // semantics.types($$[$0-2], ["integer", "real"]);
            // semantics.same_types($$[$0-2], $$[$0])
            this.$ = { 
                type: 'binary operator', 
                data_type: $$[$0-2].data_type,
                operator: $$[$0-1], 
                args: [$$[$0-2], $$[$0]] 
            } 
        
break;
case 70:
 
            // semantics.types($$[$0-2], ["integer", "real"]);
            // semantics.same_types($$[$0-2], $$[$0])
            this.$ = { 
                type: 'binary operator', 
                operator: $$[$0-1], 
                data_type: $$[$0-2].data_type,
                args: [$$[$0-2], $$[$0]] 
            } 
        
break;
case 71: case 72: case 73: case 74: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84:
 
            this.$ = { 
                type: 'binary operator', 
                data_type: $$[$0-2].data_type,
                operator: $$[$0-1], 
                args: [$$[$0-2], $$[$0]] 
            } 
        
break;
case 75:
 
            this.$ = { 
                type: 'binary operator',
                data_type: $$[$0-2].data_type, 
                operator: $$[$0-1], 
                args: [$$[$0-2], $$[$0]] 
            } 
        
break;
case 85:
 
            this.$ = { 
                type: 'binary operator', 
                data_type: $$[$0-1].data_type,
                operator: $$[$0-1], 
                args: [$$[$0]] 
            } 
        
break;
case 86:
 
            this.$ = { 
                type: 'binary operator', 
                data_type: $$[$0-1].data_type,
                operator: $$[$0-1], 
                args: [$$[$0]] } 
            
break;
case 87:
 
            this.$ = $$[$0-1]
        
break;
case 88:
 
            $$[$0].data_type = $$[$0].type;
            this.$ = $$[$0]
         
break;
case 89:
 
            semantics.declared(symbol, $$[$0]);
            this.$ = symbol.lookup($$[$0])
        
break;
case 90:
 
            this.$ = $$[$0-3]
            this.$ = { 
                type: 'call', 
                name: $$[$0-3], 
                args: $$[$0-1] 
            } 
        
break;
case 91:
 
            this.$ = { 
                type: 'array access', 
                name: $$[$0-3], 
                args: $$[$0-1] 
            } 
        
break;
case 92:
 
            this.$ = [ ]; 
        
break;
case 97:
 
            this.$ = { 
                type: "iterative operator", 
                operator: $$[$0-7], 
                statements: $$[$0], 
                variable: $$[$0-6], 
                range: [$$[$0-4], $$[$0-2]] 
            } 
        
break;
}
},
table: [{3:1,4:2,27:[1,3]},{1:[3]},{5:[1,4]},{6:6,7:$V0,28:5},{1:[2,1]},{29:[1,8]},{29:[2,18]},o([22,24,25,29,36,48,50,51,57,63,67,69,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,91,92],[2,2]),{5:[2,15],30:9,31:10,32:19,33:$V1,37:11,39:14,40:12,41:13,42:15,43:20,44:17,45:18,46:$V2,52:$V3,53:$V4,55:$V5},{31:25,32:19,33:$V1,40:12,41:13,42:15,43:20,53:$V4,55:$V5},{5:[2,17]},o($V6,[2,23],{37:11,39:14,44:17,45:18,30:26,46:$V2,52:$V3}),{30:27,37:11,39:14,41:28,44:17,45:18,46:$V2,52:$V3,55:$V5},{24:[1,29]},{30:31,32:19,33:$V1,37:11,39:14,40:30,41:32,42:15,43:20,44:17,45:18,46:$V2,52:$V3,53:$V4,55:$V5},o($V7,[2,33],{42:15,32:19,43:20,40:33,33:$V1,53:$V4}),{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:38,48:$Vd,56:34,57:[1,36],58:35,64:37,65:39,66:40,68:$Ve,73:$Vf,84:$Vg,89:47,90:$Vh},o($Vi,[2,37]),o($Vi,[2,38]),o($Vi,[2,35]),o($Vi,[2,36]),{6:60,7:$V0,47:59},{6:60,7:$V0,47:61},{6:64,7:$V0,34:62,35:63},{6:68,7:$V0,54:65,61:67,62:66},{5:[2,16]},o($V6,[2,24]),{41:69,55:$V5},{24:[1,70]},{5:[2,32]},{30:71,37:11,39:14,41:72,44:17,45:18,46:$V2,52:$V3,55:$V5},{41:73,55:$V5},{29:$Vj,38:74},o($V7,[2,34]),{57:[1,76]},{29:$Vk,57:[1,77]},o($Vl,[2,45]),o($Vm,[2,59]),o($Vm,[2,60],{36:$Vn,51:$Vo,67:[1,79],72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD}),o($Vm,[2,61]),o($Vm,[2,62]),{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:97,48:$Vd,73:$Vf,84:$Vg},{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:98,48:$Vd,73:$Vf,84:$Vg},{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:99,48:$Vd,73:$Vf,84:$Vg},o($VE,[2,88]),o($VE,[2,89],{22:[1,101],48:[1,100]}),{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:102,48:$Vd,73:$Vf,84:$Vg},o($Vm,[2,96]),o($VE,[2,8]),o($VE,[2,9]),o($VE,[2,10]),o($VE,[2,11]),o($VE,[2,12]),{6:103,7:$V0},o($VE,[2,3]),o($VE,[2,4]),o($VE,[2,6]),o($VE,[2,5]),o($VE,[2,7]),{48:[1,104]},{48:[2,41]},{48:[1,105]},o($Vi,[2,19]),o($Vi,[2,20],{35:63,6:64,34:106,7:$V0}),{36:[1,107]},o($Vi,[2,42]),{29:[1,108]},{51:[1,109]},{51:[2,54],63:[1,110]},{24:[1,111]},{5:[2,31]},{41:112,55:$V5},{29:$Vj,38:113},{29:$Vj,38:114},o($Vi,[2,29]),o($Vi,[2,25]),o($Vl,[2,43]),o($Vl,[2,44]),{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:38,48:$Vd,56:115,57:[2,57],58:116,64:37,65:39,66:40,68:$Ve,73:$Vf,84:$Vg,89:47,90:$Vh},{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:117,48:$Vd,73:$Vf,84:$Vg},{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:118,48:$Vd,73:$Vf,84:$Vg},{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:119,48:$Vd,73:$Vf,84:$Vg},{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:120,48:$Vd,73:$Vf,84:$Vg},{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:121,48:$Vd,73:$Vf,84:$Vg},{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:122,48:$Vd,73:$Vf,84:$Vg},{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:123,48:$Vd,73:$Vf,84:$Vg},{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:124,48:$Vd,73:$Vf,84:$Vg},{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:125,48:$Vd,73:$Vf,84:$Vg},{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:126,48:$Vd,73:$Vf,84:$Vg},{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:127,48:$Vd,73:$Vf,84:$Vg},{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:128,48:$Vd,73:$Vf,84:$Vg},{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:129,48:$Vd,73:$Vf,84:$Vg},{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:130,48:$Vd,73:$Vf,84:$Vg},{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:131,48:$Vd,73:$Vf,84:$Vg},{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:132,48:$Vd,73:$Vf,84:$Vg},{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:133,48:$Vd,73:$Vf,84:$Vg},{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:134,48:$Vd,73:$Vf,84:$Vg},o($VE,[2,85]),o($VF,[2,86],{74:$Vr,75:$Vs,76:$Vt,82:$Vz,84:$VB,85:$VC,86:$VD}),{36:$Vn,50:[1,135],51:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD},{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:139,48:$Vd,50:$VG,59:137,73:$Vf,84:$Vg,87:136,88:138},{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:140,48:$Vd,73:$Vf,84:$Vg},{36:$Vn,51:$Vo,69:[1,141],72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD},{67:[1,142]},{6:68,7:$V0,49:143,50:$VG,59:144,60:145,61:146},{6:68,7:$V0,49:147,50:$VG,59:144,60:145,61:146},o($Vi,[2,21]),{8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:148},o($Vi,[2,51],{62:66,61:67,6:68,54:149,7:$V0}),{19:150,20:$VH,21:$VI},{6:68,7:$V0,61:153},{5:[2,30]},{29:$Vj,38:154},o($Vi,[2,28]),o($Vi,[2,27]),{57:[2,58]},{29:$Vk,57:[2,56]},o($Vm,[2,63],{36:$Vn,51:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD}),o($VF,[2,68],{74:$Vr,75:$Vs,76:$Vt,82:$Vz,84:$VB,85:$VC,86:$VD}),o($VF,[2,69],{74:$Vr,75:$Vs,76:$Vt,82:$Vz,84:$VB,85:$VC,86:$VD}),o($VJ,[2,70],{84:$VB}),o($VJ,[2,71],{84:$VB}),o($VJ,[2,72],{84:$VB}),o($VK,[2,73],{72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD}),o($VK,[2,74],{72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD}),o($VL,[2,75],{36:$Vn,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD}),o($VL,[2,76],{36:$Vn,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD}),o($VL,[2,77],{36:$Vn,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD}),o($VL,[2,78],{36:$Vn,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD}),o($VJ,[2,79],{84:$VB}),o($VF,[2,80],{74:$Vr,75:$Vs,76:$Vt,82:$Vz,84:$VB,85:$VC,86:$VD}),o($VE,[2,81]),o([24,25,29,50,51,57,63,67,69,71,91,92],[2,82],{36:$Vn,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD}),o($VJ,[2,83],{84:$VB}),o($VJ,[2,84],{84:$VB}),o($VE,[2,87]),{50:[1,155]},{50:[2,92]},{50:[2,93],63:[1,156]},o([50,63],[2,95],{36:$Vn,51:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD}),{25:[1,157],36:$Vn,51:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD},{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:38,41:160,48:$Vd,55:$V5,58:159,64:37,65:39,66:40,68:$Ve,70:158,73:$Vf,84:$Vg,89:47,90:$Vh},{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:161,48:$Vd,73:$Vf,84:$Vg},{50:[1,162]},{50:[2,47]},{29:[1,163],50:[2,48]},{51:[1,164]},{50:[1,165]},{29:[1,166]},o($Vi,[2,52]),{29:[2,53]},o($VM,[2,13]),{22:[1,167]},{51:[2,55]},o($Vi,[2,26]),o($VE,[2,90]),{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:139,48:$Vd,50:$VG,59:137,73:$Vf,84:$Vg,87:168,88:138},o($VE,[2,91]),o([29,57],[2,64],{71:[1,169]}),o($Vm,[2,66]),o($Vm,[2,67]),{36:$Vn,51:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,91:[1,170]},{29:[1,171]},{6:68,7:$V0,49:172,50:$VG,59:144,60:145,61:146},{19:173,20:$VH,21:$VI},{51:[1,174]},o([7,33,46,52,53,55],[2,22]),{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:175,48:$Vd,73:$Vf,84:$Vg},{50:[2,94]},{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:38,41:160,48:$Vd,55:$V5,58:159,64:37,65:39,66:40,68:$Ve,70:176,73:$Vf,84:$Vg,89:47,90:$Vh},{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:177,48:$Vd,73:$Vf,84:$Vg},o($Vi,[2,40]),{50:[2,49]},o($VM,[2,50]),{19:178,20:$VH,21:$VI},{24:[1,179],36:$Vn,51:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD},o($Vm,[2,65]),{36:$Vn,51:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,92:[1,180]},{29:[1,181]},{24:[1,182]},{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:38,41:160,48:$Vd,55:$V5,58:159,64:37,65:39,66:40,68:$Ve,70:183,73:$Vf,84:$Vg,89:47,90:$Vh},o($Vi,[2,39]),{6:45,7:$V0,8:48,9:$V8,10:49,11:$V9,12:51,13:$Va,14:50,15:$Vb,16:52,17:$Vc,18:44,23:184,48:$Vd,73:$Vf,84:$Vg},o($Vm,[2,97]),{25:[1,185],36:$Vn,51:$Vo,72:$Vp,73:$Vq,74:$Vr,75:$Vs,76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD},{26:[1,186]},{20:[1,187]},o($VM,[2,14])],
defaultActions: {4:[2,1],6:[2,18],10:[2,17],25:[2,16],29:[2,32],60:[2,41],70:[2,31],111:[2,30],115:[2,58],137:[2,92],144:[2,47],150:[2,53],153:[2,55],168:[2,94],172:[2,49]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    let scope = {
        data: [],
        add (item) {
            scope.data.unshift(item)
        },
        pop () {
            return scope.data.shift()
        },
        peek () {
            return scope.data[0]
        },
    }

    let symbol = {
        data: {},
        lookup (symbol_item) {
            if(!symbol.data[scope.peek()])
                return null;
            for (i in scope.data) {
                block = scope.data[i]
                let symbols = symbol.data[block]
                
                for (i in symbols) {
                    sym = symbols[i]
                    if (sym.name == symbol_item.value)
                        return sym
                }
            }
            return null;
        },
        add (symbol_item, type, args, return_type) {
            if (symbol.lookup(symbol_item))
                error.throw(symbol_item + " was already defined in " + scope.peek())
            if (!symbol.data[scope.peek()])
                symbol.data[scope.peek()] = []
            symbol.data[scope.peek()].push({
                name: symbol_item,
                data_type: type,
                args: args,
                return_type: return_type
            })
        },
        debug () {
            console.log("-- SYMBOL TABLE --")
            console.log(JSON.stringify(symbol.data, null, 2))
            console.log("------------------");
        }
    }

    let error = {
        throw (message) {
            throw new Error (message)
        }
    }

    let semantics = require('./semantics');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 29;
break;
case 1:/* skip whitespace */
break;
case 2:return 27;
break;
case 3:return 53;
break;
case 4:return 55;
break;
case 5:return 57;
break;
case 6:return 68;
break;
case 7:return 26;
break;
case 8:return 69;
break;
case 9:return 71;
break;
case 10:return 'WHILE';
break;
case 11:return 92;
break;
case 12:return 91;
break;
case 13:return 90;
break;
case 14:return 46;
break;
case 15:return 52;
break;
case 16:return 33;
break;
case 17:return 21;
break;
case 18:return '{';
break;
case 19:return '}';
break;
case 20:return '#';
break;
case 21:return '?';
break;
case 22:return 67;
break;
case 23:return 48;
break;
case 24:return 50;
break;
case 25:return 22;
break;
case 26:return 25;
break;
case 27:return 75;
break;
case 28:return 74;
break;
case 29:return 76;
break;
case 30:return 72;
break;
case 31:return 73;
break;
case 32:return 80;
break;
case 33:return 77;
break;
case 34:return 78;
break;
case 35:return 81;
break;
case 36:return 79;
break;
case 37:return 36;
break;
case 38:return 63;
break;
case 39:return 51;
break;
case 40:return 24;
break;
case 41:return 85;
break;
case 42:return 86;
break;
case 43:return 82;
break;
case 44:return 83;
break;
case 45:return 84;
break;
case 46:return 5;
break;
case 47:return 20;
break;
case 48:return 11;
break;
case 49:return 9;
break;
case 50:return 17;
break;
case 51:return 15;
break;
case 52:return 13;
break;
case 53:return 7;
break;
case 54:return 5;
break;
}
},
rules: [/^(?:;)/,/^(?:\s+)/,/^(?:program\b)/,/^(?:var\b)/,/^(?:begin\b)/,/^(?:end\b)/,/^(?:if\b)/,/^(?:of\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:to\b)/,/^(?:for\b)/,/^(?:function\b)/,/^(?:procedure\b)/,/^(?:const\b)/,/^(?:array\b)/,/^(?:\{)/,/^(?:\})/,/^(?:#)/,/^(?:\?)/,/^(?::=)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\+)/,/^(?:-)/,/^(?:<=)/,/^(?:<>)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:=)/,/^(?:,)/,/^(?::)/,/^(?:\.)/,/^(?:mod\b)/,/^(?:div\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:not\b)/,/^(?:$)/,/^(?:char|integer|boolean|string\b)/,/^(?:[\+\-]?\d+\.\d+)/,/^(?:[\+\-]?\d+)/,/^(?:true|false\b)/,/^(?:'.')/,/^(?:'(\\.|[^'\\])*')/,/^(?:[$a-zA-Z_]+[A-Za-z0-9_]*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = pascalet;
exports.Parser = pascalet.Parser;
exports.parse = function () { return pascalet.parse.apply(pascalet, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}